user  www; # 设置nginx服务的操作用户
worker_processes  auto; #worker进程数，默认是1；

# worker 进程的最大打开文件数限制，默认 2000，最大值是Linux系统支持的最大链接数 65535（16位存储-2^16）
# 可以将这个值增大到 worker_processes * worker_connections，至少是 worker_connections * 2
worker_rlimit_nofile 65535;


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024; # 单个进程能并发处理的最大连接数，包含了所有的Nginx链接
}

#                  worker_processes * worker_connections
# 最大连接数 = ---------------------------------------------
#              (keep_alive_timeout + avg_response_time) * 2

http {
    # 媒体类型：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types
    include       mime.types; # 媒体类型文件
    default_type  application/octet-stream; # 默认HTTP Respond content-type类型。application-二进制类型，octet-stream 未知子类型

    # 日志记录模式：https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format access escape=json '{"timestamp":"$time_iso8601",'
                                    '"request_time":"$request_time",'
                                    '"log_time":"$msec",'
                                    '"time_local":"$time_local",'
                                    '"host":"$host",'
                                    '"uri":"$uri",'
                                    '"request":"$request",'
                                    '"status":"$status",'
                                    '"scheme":"$scheme",'
                                    '"body_bytes_sent":"$body_bytes_sent",'
                                    '"http_user_agent":"$http_user_agent",'
                                    '"http_referer":"$http_referer",'
                                    '"http_x_forwarded_for":"$http_x_forwarded_for",'
                                    '"request_length":"$request_length",'
                                    '"request_body":"$request_body",'
                                    '"server_addr":"$server_addr",'
                                    '"remote_addr":"$remote_addr",'
                                    '"upstream_addr":"$upstream_addr",'
                                    '"upstream_status":"$upstream_status",'
                                    '"upstream_response_time":"$upstream_response_time"'
                                    '}';
    # 设置变量
    # 根据 $time_iso8601(日志写入时间)-生成格式：2021-08-08T08:32:27+00:00定义变量
    # 年-$year、月-$month、日-$day、时-$hour、分-$minutes、秒-$seconds 变量
    # if 语句必须要在 server 上下文中才能使用
    # if 语句定义语法：if ($time_iso8601 ~ "^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})T(?<hour>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2})") {}
    map $time_iso8601 $year {
        default '0000';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $1;
    }
    map $time_iso8601 $month {
        default '00';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $2;
    }
    map $time_iso8601 $day {
        default '00';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $3;
    }
    map $time_iso8601 $hour {
        default '00';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $4;
    }
    map $time_iso8601 $minutes {
        default '00';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $5;
    }
    map $time_iso8601 $seconds {
        default '00';
        "~^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" $6;
    }
    # 开启 access_log，按照每日记录，记录格式使用上方定义的 access 格式
    access_log /apps/nginx/logs/$year-$month-$day-access.log access;

    # 使用sendfile系统调用来传输文件，提升了文件传输的性能
    # 传统方式文件传输：硬盘—>内核缓冲区—>用户缓冲区—>内核socket缓冲区—>协议引擎
    # sendfile 文件传输：硬盘—>内核缓冲区—>内核socket缓冲区—>协议引擎
    sendfile       on;
    tcp_nopush     off; # 返回数据客户端之前，等报文达到最大报文长度(MMS)再一次性发送-最大延时等待200ms

    autoindex               on; # 显示目录
    autoindex_exact_size    off; # 关闭详细文件大小统计
    autoindex_localtime     on; # 显示文件时间

    # keep-alive 长链接
    # 设置keep-alive客户端与服务端保持开启的超时值。
    # 对于内部服务器通讯的场景，该值可以适当增加，一般来说用户端设置 60-75 已经够用了
    keepalive_timeout  60;
    # 设置一个keep-alive连接上可以服务的最大请求数
    # 当一个keep-alive连接处理的请求数达到设定值后，服务端就会强迫客户端关闭此次连接，然后重新建立新的长链接
    # 默认是 100，但对于某些高 QPS 的场景，显示是不够的。若该值设置不合理会造成请求的客户端大量的请求 TIME_WAIT
    keepalive_requests 1000;

    # https://www.cnblogs.com/xzkzzz/p/9224358.html
    gzip  on; # 开启 gzip 压缩
    # 设置 HTTP1.1及其以上版本才开启 gzip 功能（因为：HTTP 1.0 gzip 和 keep-alive 功能只能两者选其一）
    # 因此：若当前nginx作为反向代理服务器，要设置 proxy_http_version 1.1; 否则 gzip 可能设置了也没有效果
    # nginx 与 内部服务器-upstream server 进行 http 通讯默认使用 http 1.0。https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
    gzip_http_version 1.1;
    gzip_disable "msie6"; # UA 中含有 msie6 的则关闭 gzip 功能（IE6 浏览器对 gzip 功能有bug，支持不完善）
    gzip_comp_level 5; # 设置压缩等级（0-9）。一般保持在 3-5 级间，随着压缩等级增大资源消耗，3-5 是一个很好平衡压缩-CPU使用率之间的等级( QPS高情况下1也足够了)
    gzip_min_length 20; # 若文件小于 20K 则不进行 gzip 压缩（单位 K）
    gzip_proxied any; # 对代理请求启用 gzip 功能（例如：作为 CDN 回源服务器时）
    gzip_buffers 16 8k; # 设置压缩缓冲区（若处理请求压缩的缓冲区数量和大小超过设定值，缓冲区将使用磁盘而不是内存，可以考虑不设置使用默认 32 4k|16 8k）
    gzip_vary on; # 响应头增加“Vary: Accept-Encoding;”（CDN 缓存时经常需要进行此选项设置)
    # 设置需要进行压缩的 MIME 类型，不在设置范围内则不压缩
    gzip_types text/plain;
    gzip_types text/css;
    gzip_types application/javascript
    gzip_types application/json;
    gzip_types application/vnd.ms-fontobject;
    gzip_types application/x-font-ttf;
    gzip_types font/opentype;
    gzip_types image/svg+xml;
    gzip_types image/x-icon;

    include vhost/*.conf;
}
