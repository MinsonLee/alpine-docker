user  www; # 设置nginx服务的操作用户
worker_processes  auto; #worker进程数，默认是1；

# worker 进程的最大打开文件数限制，默认 2000，最大值是Linux系统支持的最大链接数 65535（16位存储-2^16）
# 可以将这个值增大到 worker_processes * worker_connections，至少是 worker_connections * 2
worker_rlimit_nofile 65535;


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024; # 单个进程能并发处理的最大连接数，包含了所有的Nginx链接
}

#                  worker_processes * worker_connections
# 最大连接数 = ---------------------------------------------
#              (keep_alive_timeout + avg_response_time) * 2

http {
    include       mime.types; # 媒体类型文件
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format  access '$request_time|$remote_addr|$host|[$time_local]|$request|'
                       '$status|$body_bytes_sent|$http_referer|$http_x_forwarded_for|'
                       '$upstream_addr|$upstream_status|$upstream_response_time|'
                       '"$http_user_agent"|$request_body|$scheme';

    # 使用sendfile系统调用来传输文件，提升了文件传输的性能
    # 传统方式文件传输：硬盘—>内核缓冲区—>用户缓冲区—>内核socket缓冲区—>协议引擎
    # sendfile 文件传输：硬盘—>内核缓冲区—>内核socket缓冲区—>协议引擎
    sendfile       on;
    tcp_nopush     off; # 返回数据客户端之前，等报文达到最大报文长度(MMS)再一次性发送-最大延时等待200ms

    autoindex               on; # 显示目录
    autoindex_exact_size    off; # 关闭详细文件大小统计
    autoindex_localtime     on; # 显示文件时间

    keepalive_timeout  60;

    gzip  on; # 开启 gzip 压缩

    include vhost/*.conf;
}
